/*
 * AWSECommerceService.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using AWSECommerceService.Standard;
using AWSECommerceService.Standard.Utilities;
using AWSECommerceService.Standard.Http.Request;
using AWSECommerceService.Standard.Http.Response;
using AWSECommerceService.Standard.Http.Client;
using AWSECommerceService.Standard.Exceptions;

namespace AWSECommerceService.Standard.Controllers
{
    public partial class AWSECommerceServiceBindingController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static AWSECommerceServiceBindingController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static AWSECommerceServiceBindingController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new AWSECommerceServiceBindingController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// ItemSearch90
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsg response from the API call</return>
        public Models.ItemSearchResponseMsg CreateItemSearchPost11(Models.ItemSearchRequestMsg body)
        {
            Task<Models.ItemSearchResponseMsg> t = CreateItemSearchPost11Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// ItemSearch90
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsg response from the API call</return>
        public async Task<Models.ItemSearchResponseMsg> CreateItemSearchPost11Async(Models.ItemSearchRequestMsg body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemSearch");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemSearchResponseMsg>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// ItemLookup91
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsg response from the API call</return>
        public Models.ItemLookupResponseMsg CreateItemLookupPost11(Models.ItemLookupRequestMsg body)
        {
            Task<Models.ItemLookupResponseMsg> t = CreateItemLookupPost11Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// ItemLookup91
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsg response from the API call</return>
        public async Task<Models.ItemLookupResponseMsg> CreateItemLookupPost11Async(Models.ItemLookupRequestMsg body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemLookupResponseMsg>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// BrowseNodeLookup92
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsg response from the API call</return>
        public Models.BrowseNodeLookupResponseMsg CreateBrowseNodeLookupPost11(Models.BrowseNodeLookupRequestMsg body)
        {
            Task<Models.BrowseNodeLookupResponseMsg> t = CreateBrowseNodeLookupPost11Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// BrowseNodeLookup92
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsg response from the API call</return>
        public async Task<Models.BrowseNodeLookupResponseMsg> CreateBrowseNodeLookupPost11Async(Models.BrowseNodeLookupRequestMsg body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/BrowseNodeLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.BrowseNodeLookupResponseMsg>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// SimilarityLookup93
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsg response from the API call</return>
        public Models.SimilarityLookupResponseMsg CreateSimilarityLookupPost11(Models.SimilarityLookupRequestMsg body)
        {
            Task<Models.SimilarityLookupResponseMsg> t = CreateSimilarityLookupPost11Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// SimilarityLookup93
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsg response from the API call</return>
        public async Task<Models.SimilarityLookupResponseMsg> CreateSimilarityLookupPost11Async(Models.SimilarityLookupRequestMsg body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/SimilarityLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SimilarityLookupResponseMsg>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// CartGet94
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsg response from the API call</return>
        public Models.CartGetResponseMsg CreateCartGetPost11(Models.CartGetRequestMsg body)
        {
            Task<Models.CartGetResponseMsg> t = CreateCartGetPost11Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// CartGet94
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsg response from the API call</return>
        public async Task<Models.CartGetResponseMsg> CreateCartGetPost11Async(Models.CartGetRequestMsg body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartGet");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartGetResponseMsg>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// CartAdd95
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsg response from the API call</return>
        public Models.CartAddResponseMsg CreateCartAddPost11(Models.CartAddRequestMsg body)
        {
            Task<Models.CartAddResponseMsg> t = CreateCartAddPost11Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// CartAdd95
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsg response from the API call</return>
        public async Task<Models.CartAddResponseMsg> CreateCartAddPost11Async(Models.CartAddRequestMsg body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartAdd");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartAddResponseMsg>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// CartCreate96
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsg response from the API call</return>
        public Models.CartCreateResponseMsg CreateCartCreatePost11(Models.CartCreateRequestMsg body)
        {
            Task<Models.CartCreateResponseMsg> t = CreateCartCreatePost11Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// CartCreate96
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsg response from the API call</return>
        public async Task<Models.CartCreateResponseMsg> CreateCartCreatePost11Async(Models.CartCreateRequestMsg body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartCreate");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartCreateResponseMsg>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// CartModify97
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsg response from the API call</return>
        public Models.CartModifyResponseMsg CreateCartModifyPost11(Models.CartModifyRequestMsg body)
        {
            Task<Models.CartModifyResponseMsg> t = CreateCartModifyPost11Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// CartModify97
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsg response from the API call</return>
        public async Task<Models.CartModifyResponseMsg> CreateCartModifyPost11Async(Models.CartModifyRequestMsg body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartModify");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartModifyResponseMsg>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// CartClear98
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsg response from the API call</return>
        public Models.CartClearResponseMsg CreateCartClearPost11(Models.CartClearRequestMsg body)
        {
            Task<Models.CartClearResponseMsg> t = CreateCartClearPost11Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// CartClear98
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsg response from the API call</return>
        public async Task<Models.CartClearResponseMsg> CreateCartClearPost11Async(Models.CartClearRequestMsg body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartClear");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartClearResponseMsg>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 